#!/usr/bin/env python3

import argparse
import configparser
import getpass
import os
from typing import Callable
import pykeepass  # type: ignore
import nanopy as npy
from nanopy.rpc import RPC


class BColours:
    _bold = "\033[1m"
    _end = "\033[0m"
    _ok = "\033[32m"
    _warn = "\033[31m"

    def ok(self, s: str, prefix: str = "", suffix: str = "") -> None:
        print(prefix + self._ok + s + self._end + suffix)

    def warn(self, s: str, prefix: str = "", suffix: str = "") -> None:
        print(prefix + self._warn + s + self._end + suffix)

    def boldstr(self, s: str) -> str:
        return self._bold + s + self._end

    def amt(
        self, label: str, amount: str, colour: Callable[[str, str, str], None]
    ) -> None:
        colour("{:>40}".format(amount), label + " : ", " " + std_unit)

    def status(self, label: str, msg: str) -> None:
        print(label + " : " + msg)


def broadcast(block: str) -> None:
    ack = rpc.process(block)
    assert "hash" in ack
    bc.ok(ack["hash"])


def check_status(accounts: list[str]) -> None:
    if accounts:
        info = rpc.accounts_balances(accounts)
        for account in accounts:
            accinfo = info["balances"][account]
            bc.status("Acc", account)
            bc.amt("Bal", n.from_raw(int(accinfo["balance"])), bc.ok)
            if accinfo["receivable"] != "0":
                bc.amt("Rec", n.from_raw(int(accinfo["receivable"])), bc.ok)
            print()


def generate_block(acc: "npy.Account") -> None:
    info = rpc.account_info(acc.addr, representative=True)
    if "frontier" in info:
        acc.state = (
            info["frontier"],
            int(info["balance"]),
            npy.Account(n, info["representative"]),
        )
    else:  # pragma: no cover
        args.send = None
        if not args.rep:
            args.rep = input("Rep : ")
    args.rep = npy.Account(n, args.rep) if args.rep else None

    rbs = rpc.receivable(acc.addr)["blocks"]
    while True:
        rb = "" if args.send else rbs.pop() if rbs else ""
        bc.status("Acc", acc.addr)
        bc.amt("Bal", acc.bal, bc.ok)
        bc.status("Rep", acc.rep.addr)

        if args.send:
            args.send = npy.Account(n, args.send)
            bc.status("To ", args.send.addr)
            raw_amt = acc.raw_bal if args.empty else int(n.to_raw(input("Amt : ")))
            bc.amt("Amt", n.from_raw(raw_amt), bc.warn)
            nb = acc.send(args.send, raw_amt, args.rep)
            nb.work_generate(acc.network.send_difficulty)
            args.send = None
        elif rb and input("\nReceive blocks?(" + bc.boldstr("y") + "/n): ") != "n":
            rbi = rpc.block_info(rb)
            bc.status("From", rbi["block_account"])
            raw_amt = int(rbi["amount"])
            bc.amt("Amt", n.from_raw(raw_amt), bc.ok)
            nb = acc.receive(rb, raw_amt, args.rep)
            nb.work_generate(acc.network.receive_difficulty)
        elif args.rep:
            nb = acc.change_rep(args.rep)
            nb.work_generate(acc.network.send_difficulty)
        else:
            break

        args.rep = None
        print("\n" + nb.json)
        if input("\nBroadcast block?(y/" + bc.boldstr("n") + "): ") == "y":
            broadcast(nb.json)


bc = BColours()
parser = argparse.ArgumentParser()
parser.add_argument(
    "-a",
    "--audit",
    metavar="FILE",
    type=argparse.FileType("r"),
    help="Audit accounts in FILE.",
)
parser.add_argument(
    "-b", "--broadcast", action="store_true", help="Broadcast JSON block"
)
parser.add_argument(
    "-n",
    "--network",
    default="nano",
    choices=["banano", "beta", "nano"],
    help="Choose the network to interact with.",
)
parser.add_argument("-t", "--tor", action="store_true", help="Connect via tor.")

subparsers = parser.add_subparsers(dest="sub")
parserOpen = subparsers.add_parser("open", help="Unlock *.kdbx file")
parserOpen.add_argument("f", metavar="FILE", help="*.kdbx file.")
parserOpen.add_argument("k", metavar="KEY", help="key to open/create.")
parserOpen.add_argument("-g", "--group", help="Key group. (root)")
parserOpen.add_argument("-i", "--index", default=0, type=int, help="Account index. (0)")
parserOpen.add_argument("-r", "--rep", metavar="ADDRESS", help="Change rep")
parserOpen.add_argument("--empty", action="store_true", help="Empty account")

openG = parserOpen.add_mutually_exclusive_group()
openG.add_argument("-a", "--audit", action="store_true", help="Audit accounts")
openG.add_argument("-n", "--new", action="store_true", help="Add a new key.")
openG.add_argument("-s", "--send", metavar="ADDRESS", help="Send to")

args = parser.parse_args()

n = npy.Network()
if args.network == "banano":
    n.prefix = "ban_"
    n.send_difficulty = "fffffe0000000000"
    n.exp = 29
    rpc_url = "http://localhost:7072"
    std_unit = "BAN"
elif args.network == "beta":
    n.prefix = "xrb_"
    rpc_url = "http://localhost:55000"
    std_unit = "β"
else:
    rpc_url = "http://localhost:7076"
    std_unit = "Ӿ"

config_file = os.path.expanduser("~") + "/.config/nanopy.conf"
os.chmod(config_file, 0o600)
config = configparser.ConfigParser(allow_no_value=True)
config.read(config_file)

tor = args.tor or config["DEFAULT"].getboolean("tor", fallback=args.tor)

iploc = RPC(url="https://ipinfo.io/json", tor=tor).get()
bc.warn(iploc["city"] + " " + iploc["country"])
rpc = RPC(url=str(config[args.network].get("rpc", fallback=rpc_url)), tor=tor)

if args.sub:
    os.chmod(args.f, 0o600)
    kp = pykeepass.PyKeePass(args.f, password=getpass.getpass())
    group = kp.find_groups(name=args.group, first=True) if args.group else kp.root_group
    acci = npy.Account(n)

    if args.new:  # pragma: no cover
        seed = os.urandom(32).hex()
        acci.sk = npy.deterministic_key(seed, 0)
        bc.status(args.k, acci.addr)
        kp.add_entry(group, args.k, acci.addr.split("_")[1], seed)
        kp.save()

    else:
        entry = kp.find_entries(title=args.k, group=group, recursive=False, first=True)
        seed = entry.password
        acci.sk = npy.deterministic_key(seed, 0)
        assert n.prefix + entry.username == acci.addr
        if args.audit:
            addrs = []
            for i in range(args.index + 1):
                acci.sk = npy.deterministic_key(seed, i)
                addrs.append(acci.addr)
            check_status(addrs)
        else:
            acci.sk = npy.deterministic_key(seed, args.index)
            generate_block(acci)

elif args.broadcast:
    broadcast(input("Enter JSON block to broadcast: "))

elif args.audit:
    check_status([a.strip() for a in args.audit if a.startswith(n.prefix)])

else:
    check_status([a for a in config.options(args.network) if a.startswith(n.prefix)])

rpc.disconnect()

ticker = RPC(url="https://api.kraken.com/0/public/Ticker?pair=nanousd,nanoeur").get()
print(ticker["result"]["NANOUSD"]["c"][0], "$")
print(ticker["result"]["NANOEUR"]["c"][0], "€")
