#!/usr/bin/env python3

import argparse
import base64
import configparser
import getpass
import json
import nanopy as npy
import os
import pykeepass  # type: ignore
from nanopy.rpc import RPC
from typing import Callable


class bcolours:
    _bold = "\033[1m"
    _end = "\033[0m"
    _ok = "\033[32m"
    _warn = "\033[31m"

    def ok(self, s: str, prefix: str = "", suffix: str = "") -> None:
        print(prefix + self._ok + s + self._end + suffix)

    def warn(self, s: str, prefix: str = "", suffix: str = "") -> None:
        print(prefix + self._warn + s + self._end + suffix)

    def boldstr(self, s: str) -> str:
        return self._bold + s + self._end

    def amt(
        self, label: str, amount: str, colour: Callable[[str, str, str], None]
    ) -> None:
        colour("{:>40}".format(amount), label + " : ", " " + std_unit)

    def status(self, label: str, msg: str) -> None:
        print(label + " : " + msg)


def generate_block(sk: str, pk: str, acc: str) -> None:
    bc.status("Acc", acc)
    rbs = rpc.receivable(acc)["blocks"]

    while True:
        info = {}
        info = rpc.account_info(acc, representative=True)
        link = npy.account_key(args.send) if args.send else rbs.pop() if rbs else ""
        prev = ""
        bal = "0"

        if "frontier" in info:
            prev = info["frontier"]
            bal = info["balance"]
            rep = info["representative"]
            bc.amt("Bal", npy.from_raw(bal), bc.ok)
            bc.status("Rep", rep)

            if (not args.send) and (not args.rep):
                if not link:
                    break
                if input("\nReceive blocks?(" + bc.boldstr("y") + "/n): ") == "n":
                    break

        else:  # pragma: no cover
            args.send = ""
            rep = args.rep if args.rep else input("Rep : ")

        if args.rep:
            rep = args.rep

        assert npy.validate_account_number(rep)

        if args.send:
            bc.status("To ", npy.account_get(link))
            if args.empty:
                bc.amt("Amt", npy.from_raw(bal), bc.warn)
                bal = "0"
            else:
                samt = int(npy.to_raw(input("Amt : ")))
                assert samt <= int(bal)
                bal = str(int(bal) - samt)
            bc.amt("Bal", npy.from_raw(bal), bc.warn)

        elif link:
            rb = rpc.block_info(link)
            bc.status("From", rb["block_account"])
            ramt = rb["amount"]
            bal = str(int(bal) + int(ramt))
            bc.amt("Amt", npy.from_raw(ramt), bc.ok)
            bc.amt("Bal", npy.from_raw(bal), bc.ok)

        if args.send or args.rep or link:
            current_difficulty = ""
            if args.network == "nano":
                current_difficulty = (
                    "fffffff800000000" if args.send else "fffffe0000000000"
                )
            args.send = args.rep = ""
            nb = npy.block_create(
                sk, prev, rep, bal, link, difficulty=current_difficulty
            )

            print("\n" + json.dumps(nb))

            if input("\nBroadcast block?(y/" + bc.boldstr("n") + "): ") == "y":
                ack = rpc.process(json.dumps(nb))
                assert "hash" in ack
                bc.ok(ack["hash"])


bc = bcolours()
parser = argparse.ArgumentParser()
parser.add_argument(
    "-a",
    "--audit",
    metavar="FILE",
    type=argparse.FileType("r"),
    help="Audit accounts in FILE.",
)
parser.add_argument(
    "-b", "--broadcast", action="store_true", help="Broadcast JSON block"
)
parser.add_argument(
    "-n",
    "--network",
    default="nano",
    choices=["banano", "beta", "nano"],
    help="Choose the network to interact with.",
)
parser.add_argument("-t", "--tor", action="store_true", help="Connect via tor.")

subparsers = parser.add_subparsers(dest="sub")
parserOpen = subparsers.add_parser("open", help="Unlock *.kdbx file")
parserOpen.add_argument("f", metavar="FILE", help="*.kdbx file.")
parserOpen.add_argument("k", metavar="KEY", help="key to open/create.")
parserOpen.add_argument("-g", "--group", help="Key group. (root)")
parserOpen.add_argument("-i", "--index", default=0, type=int, help="Account index. (0)")
parserOpen.add_argument("-r", "--rep", metavar="ADDRESS", help="Change rep")
parserOpen.add_argument("--empty", action="store_true", help="Empty account")

openG = parserOpen.add_mutually_exclusive_group()
openG.add_argument("-a", "--audit", action="store_true", help="Audit accounts")
openG.add_argument("-n", "--new", action="store_true", help="Add a new key.")
openG.add_argument("-s", "--send", metavar="ADDRESS", help="Send to")

args = parser.parse_args()

if args.network == "banano":
    npy.ACCOUNT_PREFIX = "ban_"
    npy.DIFFICULTY = "fffffe0000000000"
    npy.EXPONENT = 29
    rpc_url = "http://localhost:7072"
    std_unit = "BAN"
elif args.network == "beta":
    npy.ACCOUNT_PREFIX = "xrb_"
    rpc_url = "http://localhost:55000"
    std_unit = "β"
else:
    rpc_url = "http://localhost:7076"
    std_unit = "Ӿ"

config_file = os.path.expanduser("~") + "/.config/nanopy.conf"
os.chmod(config_file, 0o600)
config = configparser.ConfigParser(allow_no_value=True)
config.read(config_file)

tor = args.tor or config["DEFAULT"].getboolean("tor", fallback=args.tor)

iploc = RPC(url="https://ipinfo.io/json", tor=tor)._get()
bc.warn(iploc["city"] + " " + iploc["country"])
rpc = RPC(url=str(config[args.network].get("rpc", fallback=rpc_url)), tor=tor)

accounts = []

if args.sub:
    os.chmod(args.f, 0o600)
    kp = pykeepass.PyKeePass(args.f, password=getpass.getpass())
    group = kp.find_groups(name=args.group, first=True) if args.group else kp.root_group

    if args.new:  # pragma: no cover
        seedb = os.urandom(32)
        account0 = npy.deterministic_key(seedb.hex(), 0)[2]
        bc.status(args.k, account0)
        kp.add_entry(group, args.k, account0, base64.b85encode(seedb).decode())
        kp.save()

    else:
        entry = kp.find_entries(title=args.k, group=group, recursive=False, first=True)
        seed = base64.b85decode(entry.password).hex()
        assert entry.username == npy.deterministic_key(seed, 0)[2]

        if args.audit:
            accounts = [
                npy.deterministic_key(seed, i)[2] for i in range(args.index + 1)
            ]
        else:
            generate_block(*npy.deterministic_key(seed, args.index))

elif args.broadcast:
    ack = rpc.process(input("Enter JSON block to broadcast: "))
    assert "hash" in ack
    bc.ok(ack["hash"])

elif args.audit:
    accounts = [a.strip() for a in args.audit if a.startswith(npy.ACCOUNT_PREFIX)]

else:
    accounts = [
        a for a in config.options(args.network) if a.startswith(npy.ACCOUNT_PREFIX)
    ]

if accounts:
    info = rpc.accounts_balances(accounts)
    for account in accounts:
        accinfo = info["balances"][account]
        bc.status("Acc", account)
        bc.amt("Bal", npy.from_raw(accinfo["balance"]), bc.ok)
        if accinfo["receivable"] != "0":
            bc.amt("Rec", npy.from_raw(accinfo["receivable"]), bc.ok)
        print()

rpc.disconnect()

ticker = RPC(url="https://api.kraken.com/0/public/Ticker?pair=nanousd,nanoeur")._get()
print(ticker["result"]["NANOUSD"]["c"][0], "$")
print(ticker["result"]["NANOEUR"]["c"][0], "€")
